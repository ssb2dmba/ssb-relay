name: Deploy Debian and RPM Repo plus Jekyll homepage

on:
  push:
    branches: ["main", "devel"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}      
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Install required packages
        run: |
          until sudo apt update
          do
            sleep 1
          done
          sudo apt install -y jq createrepo-c coreutils gnupg2 dpkg-dev git nodejs libsodium-dev dpkg fakeroot jq bluetooth bluez

      - name: Insert environment variables
        id: env_config
        run: |
          echo GNUPGHOME="$(mktemp -d /tmp/pgpkeys-XXXXXX)" >> $GITHUB_ENV
          echo REPO_OWNER="$(echo "${GITHUB_REPOSITORY}" | cut -d/ -f1)" >> $GITHUB_ENV
          echo REPO_NAME="$(echo "${GITHUB_REPOSITORY}" | cut -d/ -f2)" >> $GITHUB_ENV
          echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Build Debian package
        run: | 
          git config --global user.email "emmanuel.florent@gmail.com"
          git config --global user.name "DMBA"
          ./deb-install/make-pkg.sh ${{ steps.env_config.outputs.BRANCH }}  
      
      - name: 'Clean up nightly releases'
        uses: dev-drprasad/delete-older-releases@v0.3.2
        with:
          keep_latest: 1
          delete_tags: true
          delete_tag_pattern: development
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Confirm GPG Key loaded
        run: |
          gpg --list-keys
          echo "${{ steps.import_gpg.outputs.fingerprint }}"



      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
          verbose: true

      - name: Set permissions on the _site directory
        run: sudo chown -R runner:docker _site      

      # - name: Build Debian repository
      #   run: |
      #     export GPG_FINGERPRINT="${{ steps.import_gpg.outputs.fingerprint }}"
      #     export ORIGIN="${{ steps.import_gpg.outputs.name }}"
      #     .github/scripts/build_repos.sh   

      - name: Set permissions on the _site directory
        run: sudo chown -R runner:docker _site          

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
